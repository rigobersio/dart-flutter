// Simula una petición a una API que devuelve un String después de un tiempo.Future<String> obtenerDatosDeApi() {  // Future.delayed crea un Future que se completa después de la duración dada.  return Future.delayed(Duration(seconds: 3), () {    // Este es el valor que el Future devolverá.    return '¡Datos recibidos exitosamente!';  });}// Simula una operación que podría fallar.Future<String> obtenerDatosConError() {  return Future.delayed(Duration(seconds: 2), () {    // Lanzamos un error para simular un fallo en la API.    throw Exception('No se pudo conectar al servidor.');  });}// Una función marcada con 'async' automáticamente devuelve un Future.Future<void> procesarDatos() async {  print('Iniciando la obtención de datos...');  // 'await' pausa la ejecución de esta función hasta que el Future se complete.  // Mientras tanto, el resto del programa (si lo hubiera) no se bloquea.  String datos = await obtenerDatosDeApi();  // Esta línea solo se ejecuta cuando el await anterior ha terminado.  print('Datos procesados: ${datos.toUpperCase()}');}Future<void> manejarErrores() async {  print('\nIntentando obtener datos de una API que falla...');  try {    String datos = await obtenerDatosConError();    print('Esto no se imprimirá: $datos');  } catch (e) {    print('Se capturó un error: $e');  }}// --- Streams ---// Una función con 'async*' devuelve un Stream.Stream<int> contadorStream(int max) async* {  for (int i = 1; i <= max; i++) {    // Esperamos un segundo entre cada emisión.    await Future.delayed(Duration(seconds: 1));    // 'yield' es como 'return', pero para Streams. Emite un valor sin terminar la función.    yield i;  }}Future<void> escucharStream() async {  print('\nIniciando la escucha del stream de números...');  // 'await for' escucha el stream y ejecuta el cuerpo del bucle por cada valor emitido.  await for (int numero in contadorStream(5)) {    print('  - Número recibido del stream: $numero');  }  print('El stream ha terminado.');}// La función main también puede ser asíncrona.Future<void> main() async {  await procesarDatos();  await manejarErrores();  await escucharStream();  print('\nTodas las operaciones asíncronas han concluido.');}